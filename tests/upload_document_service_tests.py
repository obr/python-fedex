import logging
import os
import unittest

from fedex.base_service import FedexBaseServiceException
from fedex.services.upload_document_service import FedexUploadDocumentRequest
from tests.common import get_test_config

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger('suds').setLevel(logging.INFO)
logging.getLogger('suds.transport').setLevel(logging.DEBUG)
logging.getLogger('suds.client').setLevel(logging.DEBUG)


class UploadDocumentServiceTest(unittest.TestCase):

    #
    def setUp(self):
        logging.debug("Shalom")
        self.service = FedexUploadDocumentRequest(get_test_config())
        self.service.DestinationCountryCode = "US"
        self.service.OriginCountryCode = "FR"

    #
    def test_upload_document(self):
        logging.debug("Salve")
        file_path = os.path.join(os.path.dirname(__file__), 'resources/rfc1217.pdf')
        self.service.add_file_document(file_path)
        self.service.send_request()
        logging.debug(self.service.response)

        resp = self.service.response
        self.assertEqual(resp.HighestSeverity, "SUCCESS")

        self.assertEqual(len(resp.DocumentStatuses), 1)
        rslt = resp.DocumentStatuses[0]

        self.assertEqual(rslt.FileName, os.path.basename(file_path))
        self.assertEqual(rslt.Status, "SUCCESS")
        self.assertEqual(rslt.DocumentType, "OTHER")
        self.assertEqual(rslt.DocumentProducer, "CUSTOMER")
        self.assertIsNotNone(rslt.DocumentId)

        logging.debug("Document id generated by FedEx: {}".format(rslt.DocumentId))

    #
    def test_upload_failure(self):
        logging.debug("Salve")
        # file_path = os.path.join(os.path.dirname(__file__), 'resources/rfc1217.pdf')
        # self.service.add_file_document(file_path)
        document = self.service.create_wsdl_object_of_type("UploadDocumentDetail")
        document.DocumentType = 'OTHER'
        document.FileName = 'lol.jpg'

        document.CustomerReference = "lolling msg"
        document.DocumentContent = b"A&<<BCD\0EF"
        self.service.Documents.append(document)

        try:
            self.service.send_request()
            self.fail("LOL, expected FedexBaseServiceException")

        except FedexBaseServiceException as fe:
            self.assertEquals(fe.value.ValidationFailureDetail.message, "Invalid value: not encoded properly")
            logging.debug(fe)
